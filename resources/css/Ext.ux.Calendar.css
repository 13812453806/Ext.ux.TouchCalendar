/*!
 * 
 */
/*!
 * 
 */
/*!
 * 
 */
/*
 * Originally written by Bruno Alexandre, 26.03.2010, twitter.com/balexandre,
 * balexandre.com,  abruno.in.dk [at] gmail.com
 *
 * Rewritten into CSS3/SASS by Ondrej Jirman <megous@megous.com>, 2011 (for
 * CodeBerry s.r.o.)
 */
/* line 3, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
body, div, dl, dt, dd, ul, ol, li, h1, h2, h3,
h4, h5, h6, pre, code, form, fieldset, legend,
input, textarea, p, blockquote, th, td {
  margin: 0;
  padding: 0;
}

/* line 8, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* line 13, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
fieldset, img {
  border: 0;
}

/* line 18, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
address, caption, cite, code,
dfn, em, strong, th, var {
  font-style: normal;
  font-weight: normal;
}

/* line 23, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
li {
  list-style: none;
}

/* line 27, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
caption, th {
  text-align: left;
}

/* line 31, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
h1, h2, h3, h4, h5, h6 {
  font-size: 100%;
  font-weight: normal;
}

/* line 37, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
q:before,
q:after {
  content: "";
}

/* line 41, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
abbr, acronym {
  border: 0;
  font-variant: normal;
}

/* line 46, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
sup {
  vertical-align: text-top;
}

/* line 50, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
sub {
  vertical-align: text-bottom;
}

/* line 54, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
input, textarea, select {
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
}

/* line 60, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_reset.scss */
*:focus {
  outline: none;
}

/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/* line 10, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
html, body {
  font-family: "Helvetica Neue", HelveticaNeue, "Helvetica-Neue", Helvetica, "BBAlpha Sans", sans-serif;
  font-weight: normal;
  position: relative;
}

/* line 16, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
*, *:after, *:before {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  -webkit-user-select: none;
  -webkit-text-size-adjust: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

/*.x-android {*/
/*input[type=checkbox], input[type=radio] {*/
/*-webkit-tap-highlight-color: rgba(0, 0, 0, 0) !important;*/
/*}*/
/*input, textarea {*/
/*-webkit-tap-highlight-color: rgba(0, 0, 0, 1) !important;*/
/*}*/
/*}*/
/* line 34, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
html, body, .x-body-stretcher {
  width: 100%;
  height: 100%;
}

/* line 39, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-ios.x-tablet .x-landscape * {
  -webkit-text-stroke: 1px transparent;
}

/*
.x-ipad {
  .x-container, .x-panel, .x-toolbar, .x-mask {
    -webkit-transform: translate3d(0, 0, 0);
  }
}
*/
/* line 51, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
body {
  font-size: 104%;
}

/* line 55, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
body.x-ios {
  -webkit-backface-visibility: hidden;
}

/* line 59, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
body.x-android.x-phone {
  font-size: 116%;
}

/* line 63, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
body.x-ios.x-phone {
  font-size: 114%;
}

/* line 67, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
body.x-desktop {
  font-size: 114%;
}

/* line 71, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
input, textarea {
  -webkit-user-select: text;
}

/* line 75, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-hidden-visibility {
  visibility: hidden !important;
}

/* line 79, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-hidden-display {
  display: none !important;
}

/* line 83, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-hidden-offsets {
  position: absolute !important;
  left: -10000em;
  top: -10000em;
  visibility: hidden;
}

/* line 90, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-fullscreen {
  position: absolute !important;
  top: 0px;
  left: 0px;
}

/* line 96, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-desktop .x-body-stretcher {
  margin-bottom: 0px;
}

/* line 100, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-scroller-parent {
  overflow: hidden !important;
}

/* line 104, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-scroller-parent, .x-scroller {
  position: relative;
}

/* line 108, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-ios .x-scroller, .x-ios .x-scroller > * {
  -webkit-transform: translate3d(0, 0, 0);
}

/* line 112, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-draggable {
  z-index: 1;
}

/* line 116, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-scrollbar {
  position: absolute;
  z-index: 10;
  -webkit-transition-property: opacity;
  -webkit-transition-duration: 250ms;
  -webkit-border-radius: 4px;
  opacity: 0;
}

/* line 127, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-android .x-scrollbar {
  -webkit-transition-property: none;
  -webkit-transition-duration: 0ms;
  -webkit-border-radius: 0px;
}

/* line 133, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-scrollbar-dark {
  background-color: rgba(0, 0, 0, 0.6);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

/* line 138, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-scrollbar-light {
  background-color: rgba(255, 255, 255, 0.6);
  border: 1px solid rgba(0, 0, 0, 0.2);
}

/* line 143, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-scrollbar-vertical {
  top: 0;
  right: 4px;
  width: 4px;
}

/* line 149, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-scrollbar-horizontal {
  left: 0;
  bottom: 4px;
  height: 4px;
}

/* line 155, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-mask {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 8000;
  display: -webkit-box;
  display: box;
  -webkit-box-align: center;
  box-align: center;
  -webkit-box-pack: center;
  box-pack: center;
  background: rgba(0, 0, 0, 0.3) center center no-repeat;
}
/* line 165, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-mask.x-mask-gray {
  background-color: rgba(0, 0, 0, 0.5);
}
/* line 169, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-mask .x-mask-loading {
  display: -webkit-box;
  display: box;
  -webkit-box-orient: vertical;
  box-orient: vertical;
  -webkit-box-align: center;
  box-align: center;
  -webkit-box-pack: center;
  box-pack: center;
  -webkit-border-radius: 0.5em;
  border-radius: 0.5em;
  color: #fff;
  text-align: center;
  padding: .4em;
  font-weight: bold;
  display: block;
  width: 8.5em;
  height: 8.5em;
  background: rgba(0, 0, 0, 0.25);
}
/* line 185, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-mask .x-loading-spinner {
  margin: 1em auto .2em;
}
/* line 189, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-mask .x-loading-msg {
  font-size: .95em;
  text-shadow: rgba(0, 0, 0, 0.5) 0 -0.08em 0;
}

/* line 195, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-floating {
  position: absolute !important;
  z-index: 10000 !important;
  top: 0;
  left: 0;
}

/* line 202, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-dragging {
  opacity: 0.7;
}

/* line 206, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-panel-list {
  background-color: #bacfe8;
}

/* line 211, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-html {
  -webkit-user-select: auto;
  -webkit-touch-callout: inherit;
  line-height: 1.5;
  color: #333;
  font-size: .8em;
  padding: 1.2em;
}
/* line 33, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html body {
  line-height: 1.5;
  font-family: "Helvetica Neue", Arial, Helvetica, sans-serif;
  color: #333333;
  font-size: 75%;
}
/* line 51, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html h1, .x-html h2, .x-html h3, .x-html h4, .x-html h5, .x-html h6 {
  font-weight: normal;
  color: #222222;
}
/* line 52, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html h1 img, .x-html h2 img, .x-html h3 img, .x-html h4 img, .x-html h5 img, .x-html h6 img {
  margin: 0;
}
/* line 53, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html h1 {
  font-size: 3em;
  line-height: 1;
  margin-bottom: 0.50em;
}
/* line 54, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html h2 {
  font-size: 2em;
  margin-bottom: 0.75em;
}
/* line 55, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html h3 {
  font-size: 1.5em;
  line-height: 1;
  margin-bottom: 1.00em;
}
/* line 56, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html h4 {
  font-size: 1.2em;
  line-height: 1.25;
  margin-bottom: 1.25em;
}
/* line 57, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html h5 {
  font-size: 1em;
  font-weight: bold;
  margin-bottom: 1.50em;
}
/* line 58, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html h6 {
  font-size: 1em;
  font-weight: bold;
}
/* line 59, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html p {
  margin: 0 0 1.5em;
}
/* line 60, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html p .left {
  display: inline;
  float: left;
  margin: 1.5em 1.5em 1.5em 0;
  padding: 0;
}
/* line 61, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html p .right {
  display: inline;
  float: right;
  margin: 1.5em 0 1.5em 1.5em;
  padding: 0;
}
/* line 62, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html a {
  text-decoration: underline;
  color: #0066cc;
}
/* line 18, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/compass/stylesheets/compass/typography/links/_link-colors.scss */
.x-html a:visited {
  color: #004c99;
}
/* line 21, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/compass/stylesheets/compass/typography/links/_link-colors.scss */
.x-html a:focus {
  color: #0099ff;
}
/* line 24, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/compass/stylesheets/compass/typography/links/_link-colors.scss */
.x-html a:hover {
  color: #0099ff;
}
/* line 27, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/compass/stylesheets/compass/typography/links/_link-colors.scss */
.x-html a:active {
  color: #bf00ff;
}
/* line 63, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html blockquote {
  margin: 1.5em;
  color: #666666;
  font-style: italic;
}
/* line 64, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html strong, .x-html dfn {
  font-weight: bold;
}
/* line 65, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html em, .x-html dfn {
  font-style: italic;
}
/* line 66, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html sup, .x-html sub {
  line-height: 0;
}
/* line 67, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html abbr, .x-html acronym {
  border-bottom: 1px dotted #666666;
}
/* line 68, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html address {
  margin: 0 0 1.5em;
  font-style: italic;
}
/* line 69, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html del {
  color: #666666;
}
/* line 70, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html pre {
  margin: 1.5em 0;
  white-space: pre;
}
/* line 71, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html pre, .x-html code, .x-html tt {
  font: 1em "andale mono", "lucida console", monospace;
  line-height: 1.5;
}
/* line 72, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html li ul, .x-html li ol {
  margin: 0;
}
/* line 73, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html ul, .x-html ol {
  margin: 0 1.5em 1.5em 0;
  padding-left: 1.5em;
}
/* line 74, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html ul {
  list-style-type: disc;
}
/* line 75, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html ol {
  list-style-type: decimal;
}
/* line 76, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html dl {
  margin: 0 0 1.5em 0;
}
/* line 77, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html dl dt {
  font-weight: bold;
}
/* line 78, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html dd {
  margin-left: 1.5em;
}
/* line 79, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html table {
  margin-bottom: 1.4em;
  width: 100%;
}
/* line 80, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html th {
  font-weight: bold;
}
/* line 81, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html thead th {
  background: #c3d9ff;
}
/* line 82, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html th, .x-html td, .x-html caption {
  padding: 4px 10px 4px 5px;
}
/* line 85, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html table.striped tr:nth-child(even) td,
.x-html table tr.even td {
  background: #e5ecf9;
}
/* line 86, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html tfoot {
  font-style: italic;
}
/* line 87, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html caption {
  background: #eeeeee;
}
/* line 88, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html .quiet {
  color: #666666;
}
/* line 89, C:/Ruby192/lib/ruby/gems/1.9.1/gems/compass-0.11.beta.7/frameworks/blueprint/stylesheets/blueprint/_typography.scss */
.x-html .loud {
  color: #111111;
}
/* line 221, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-html ul li {
  list-style-type: circle;
}
/* line 224, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-html ol li {
  list-style-type: decimal;
}

/* line 230, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-video {
  background-color: #000;
}

/* line 234, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-sortable .x-dragging {
  opacity: 1;
  z-index: 5;
}

/* line 239, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/core/_core.scss */
.x-fullscreen {
  background: #eeeeee;
}

/* line 1, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/widgets/_map.scss */
.x-map {
  background-color: #edeae2;
  width: 100%;
  height: 100%;
}

/* line 7, ../../lib/sencha/resources/themes/stylesheets/sencha-touch/default/widgets/_map.scss */
.x-mask-map {
  background: transparent !important;
}

/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {measurement} [$toolbar-spacing=.2em]
 * Space between items in a toolbar (like buttons and fields)
 *
 * @class Ext.Toolbar
 * @xtype toolbar
 */
/**
 * @global {string} [$toolbar-gradient=$base-gradient]
 * Background gradient style for toolbars.
 *
 * @class Ext.Toolbar
 * @xtype toolbar
 * @see background-gradient
 */
/**
 * @global {boolean} [$include-toolbar-uis=$include-default-uis]
 * Optionally disable separate toolbar UIs (light and dark).
 *
 * @class Ext.Toolbar
 * @xtype toolbar
 */
/**
 * Includes default toolbar styles.
 *
 * @class Ext.Toolbar
 * @xtype toolbar
 */
/**
 * Creates a theme UI for toolbars.
 *
 * @param {string} $ui-label The name of the UI being created.
 *   Can not included spaces or special punctuation (used in class names)
 * @param {color} $color Base color for the UI.
 * @param {string} [$gradient: $toolbar-gradient] Background gradient style for the UI.
 *
 * @example
 * // SCSS
 * @include sencha-toolbar-ui('sub', #58710D, 'glossy');
 * 
 * // JS
 * var myTb = new Ext.Toolbar({title: 'My Green Glossy Toolbar', ui: 'sub'})
 * 
 * @class Ext.Toolbar
 * @xtype toolbar
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {measurement} $button-height Default height for buttons.
 *
 * @class Ext.Button
 * @xtype button
 */
/**
 * @global {measurement} $button-radius Default border-radius for buttons.
 *
 * @class Ext.Button
 * @xtype button
 */
/**
 * @global {measurement} $button-stroke-weight Default border width for buttons.
 *
 * @class Ext.Button
 * @xtype button
 */
/**
 * @global {string} $button-gradient Default gradient for buttons.
 *
 * @class Ext.Button
 * @xtype button
 * @see background-gradient
 */
/**
 * @global {string} $toolbar-icon-size Default size (width and height) for toolbar icons.
 *
 * @class Ext.Button
 * @xtype button
 */
/**
 * @global {boolean} $include-button-uis Optionally disable separate button UIs, including action, confirm, and decline.
 *
 * @class Ext.Button
 * @xtype button
 */
/**
 * @global {boolean} $include-button-uis Optionally disable special CSS3 effects on buttons including gradients, text-shadows, and box-shadows.
 *
 * @class Ext.Button
 * @xtype button
 */
/**
 * Includes default button styles.
 *
 * @class Ext.Button
 * @xtype button
 * @see background-gradient
 */
/**
 * Creates a theme UI for buttons.
 * Also automatically generates UIs for {ui-label}-round and {ui-label}-small.
 *
 * @param {string} $ui-label The name of the UI being created.
 *   Can not included spaces or special punctuation (used in class names)
 * @param {color} $color Base color for the UI.
 * @param {string} [$gradient: $button-gradient] Default gradient for the UI.
 *
 * @example
 * // SCSS
 * @include sencha-button-ui('secondary', #99A4AE, 'glossy');
 * 
 * // JS
 * var cancelBtn = new Ext.Button({text: 'Cancel', ui: 'secondary'});
 * 
 * @class Ext.Button
 * @xtype button
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {boolean} [$include-tabbar-uis=$include-default-uis] Optionally disable separate tabbar UIs (light and dark).
 *
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * @global {boolean} [$include-top-tabs=true]
 * Optionally exclude top tab styles by setting to false.
 *
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * @global {boolean} [$include-bottom-tabs=true]
 * Optionally exclude bottom tab styles by setting to false.
 *
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * @global {color} [$tabs-light=lighten(desaturate($base-color, 10%), 5%)]
 * Base color for "light" UI tabs.
 *
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * @global {color} [$tabs-light-active=saturate($active-color, 20%)]
 * Active color for "light" UI tabs.
 *
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * @global {color} [$tabs-dark=darken($base-color, 20%)]
 * Base color for "dark" UI tabs.
 *
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * @global {color} [$tabs-dark-active=saturate(lighten($active-color, 30%), 70%)]
 * Active color for "dark" UI tabs.
 *
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * @global {string} [$tabs-bar-gradient=$base-gradient]
 * Background gradient style for tab bars.
 *
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * @global {string} [$tabs-bottom-radius=.25em]
 * Border-radius for bottom tabs.
 *
 * @class Ext.Tab
 * @xtype tab
 */
/**
 * @global {string} [$tabs-bottom-icon-size=1.65em]
 * Icon size for bottom tabs
 *
 * @class Ext.Tab
 * @xtype tab
 */
/**
 * @global {string} [$tabs-bottom-active-gradient='glossy']
 * Background gradient style for active bottom tabs.
 *
 * @class Ext.Tab
 * @xtype tab
 */
/**
 * Includes default tab styles.
 *
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * Creates a theme UI for tabbar/tab components.
 *
 * @param {string} $ui-label The name of the UI being created.
 *   Can not included spaces or special punctuation (used in class names)
 * @param {color} $bar-color Base color for the tab bar.
 * @param {string} $bar-gradient Background gradient style for the tab bar.
 * @param {color} $tab-active-color Background-color for active tab icons.
 *
 * @example
 * // SCSS
 * @include sencha-button-ui('pink', #333, 'matte', #AE537A);
 * 
 * // JS
 * var tabs = new Ext.TabPanel({
 *    tabBar: {
 *      ui: 'pink',
 *      dock: 'bottom',
 *      layout: { pack: 'center' }
 *    },
 *    ...
 * });
 * 
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {measurement} [$carousel-indicator-size=.5em] Size (width/height) of carousel indicator dots.
 *
 * @class Ext.Carousel.Indicator
 * @xtype carouselindicator
 */
/**
 * @global {measurement} [$carousel-indicator-spacing=.2em]
 * Amount of space between carousel indicator dots.
 *
 * @class Ext.Carousel.Indicator
 * @xtype carouselindicator
 */
/**
 * @global {measurement} [$carousel-track-size=1.5em] Size of the track the carousel indicator dots are in.
 *
 * @class Ext.Carousel.Indicator
 * @xtype carouselindicator
 */
/**
 * Includes basic carousel formatting.
 *
 * @class Ext.Carousel
 * @xtype carousel
 */
/**
 * Creates a theme UI for carousel indicator components.
 *
 * @param {string} $ui-label The name of the UI being created.
 *   Can not included spaces or special punctuation (used in class names)
 * @param {color} $color Base color for the UI.
 * @param {string} $gradient Default gradient for the UI.
 * @param {color} $active-color Active color for the UI.
 * @param {string} $active-gradient Active gradient for the UI.
 * 
 * @class Ext.Carousel.Indicator
 * @xtype carouselindicator
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {measurement} [$index-bar-width=2.1em]
 * Width of the index bar.
 *
 * @class Ext.IndexBar
 * @xtype indexbar
 */
/**
 * @global {color} [$index-bar-bg-color=hsla(hue($base-color), 10%, 60%, .8)]
 * Background-color of the index bar.
 *
 * @class Ext.IndexBar
 * @xtype indexbar
 */
/**
 * @global {color} [$index-bar-color=darken(desaturate($base-color, 5%), 15%)]
 * Text color of the index bar.
 *
 * @class Ext.IndexBar
 * @xtype indexbar
 */
/**
 * Includes default index bar styles.
 *
 * @class Ext.FormPanel
 * @xtype indexbar
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {color} [$list-color=#000]
 * Text color for list rows.
 *
 * @class Ext.List
 * @xtype list
 */
/**
 * @global {color} [$list-bg-color=#f7f7f7]
 * Background-color for list rows.
 *
 * @class Ext.List
 * @xtype list
 */
/**
 * @global {color} [$list-pressed-color=lighten($active-color, 50%)]
 * Background-color for pressed list rows.
 *
 * @class Ext.List
 * @xtype list
 */
/**
 * @global {color} [$list-pressed-color=lighten($active-color, 50%)]
 * Background-color for pressed list rows.
 *
 * @class Ext.List
 * @xtype list
 */
/**
 * @global {color} [$list-active-color=$active-color]
 * Background-color for selected list rows.
 *
 * @class Ext.List
 * @xtype list
 */
/**
 * @global {string} [$list-active-gradient=$base-gradient]
 * Gradient style for selected list rows.
 *
 * @class Ext.List
 * @xtype list
 */
/**
 * @global {color} [$list-header-bg-color=lighten(saturate($base-color, 10%), 20%)]
 * Background-color for list header rows (in grouped lists).
 *
 * @class Ext.List
 * @xtype list
 */
/**
 * @global {string} [$list-header-gradient=$base-gradient]
 * Gradient style for list header rows (in grouped lists).
 *
 * @class Ext.List
 * @xtype list
 * @see background-gradient
 */
/**
 * @global {measurement} [$list-disclosure-size=1.7em]
 * Default size (width/height) for disclosure icons.
 *
 * @class Ext.List
 * @xtype list
 */
/**
 * Includes default list styles.
 *
 * @class Ext.List
 * @xtype list
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * Includes default form slider styles.
 *
 * @class Ext.form.Slider
 * @xtype sliderfield
 */
/**
 * @global {color} [$form-bg-color=#eee]
 * Default background-color for forms.
 *
 * @class Ext.form.FormPanel
 * @xtype form
 */
/**
 * @global {color} [$form-field-bg-color=#fff]
 * Default background-color for form fields.
 *
 * @class Ext.form.Field
 * @xtype field
 */
/**
 * @global {color} [$form-light=#ddd]
 * Light color for form fields, mostly used on field borders.
 *
 * @class Ext.form.Field
 * @xtype field
 */
/**
 * @global {color} [$form-dark=#333]
 * Dark color for form fields, mostly used on labels/text.
 *
 * @class Ext.form.Field
 * @xtype field
 */
/**
 * @global {measurement} [$form-label-width=6em]
 * Default width for form labels.
 *
 * @class Ext.form.Field
 * @xtype field
 */
/**
 * @global {measurement} [$form-field-height=2.5em]
 * Default height for form fields.
 *
 * @class Ext.form.Field
 * @xtype field
 */
/**
 * @global {measurement} [$form-spacing=.6em]
 * Default spacing for form fields, used for padding, etc.
 *
 * @class Ext.form.Field
 * @xtype field
 */
/**
 * @global {measurement} [$form-textarea-height=6em]
 * Default height for form textareas.
 *
 * @class Ext.form.TextArea
 * @xtype textareafield
 */
/**
 * @global {measurement} [$form-thumb-size=2.2em]
 * Default size of "thumbs" for form sliders/toggles.
 *
 * @class Ext.form.Slider
 * @xtype sliderfield
 */
/**
 * @global {measurement} [$form-toggle-size=$form-thumb-size - .35em]
 * Thumb size minus padding for inset thumbs like in a Toggle element.
 *
 * @class Ext.form.Toggle
 * @xtype togglefield
 */
/**
 * @global {measurement} [$form-fieldset-radius=.4em]
 * Default border-radius for form fieldsets.
 *
 * @class Ext.form.FieldSet
 * @xtype fieldset
 */
/**
 * @global {measurement} [$form-slider-size=.8em]
 * Height of the slider "track."
 *
 * @class Ext.form.Slider
 * @xtype sliderfield
 */
/**
 * Includes default form styles.
 *
 * @class Ext.form.FormPanel
 * @xtype button
 * @see background-gradient
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {color} [$sheet-bg-color=transparentize(darken($base-color, 40%), .1)]
 * Background-color for action sheets and message boxes.
 *
 * @class Ext.Sheet
 * @xtype actionsheet
 */
/**
 * @global {color} [$sheet-bg-gradient=$base-gradient]
 * Background gradient style for action sheets and message boxes.
 *
 * @class Ext.Sheet
 * @xtype actionsheet
 */
/**
 * @global {measurement} [$sheet-button-spacing=.5em]
 * Vertical spacing between sheet buttons.
 *
 * @class Ext.Sheet
 * @xtype actionsheet
 */
/**
 * @global {measurement} [$sheet-padding=.7em]
 * Overall padding in a sheet.
 *
 * @class Ext.Sheet
 * @xtype actionsheet
 */
/**
 * Includes default sheet styles (also required for message box).
 *
 * @class Ext.Sheet
 * @xtype actionsheet
 */
/**
 * Includes default message box styles.
 *
 * @class Ext.MessageBox
 * @xtype messagebox
 */
/**
 * @global {boolean} [$include-html-style=true] Optionally remove included HTML styles/typography (for components with styleHtmlContent: true). Styles are scoped to .x-html. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-default-icons=true] Optionally remove the default icon set which includes the following toolbar and tab bar icons: action, add, arrow_down, arrow_left, arrow_right, arrow_up, bookmarks, compose, delete, download, favorites, home, info, locate, maps, more, organize, refresh, reply, search, settings, star, team, time, trash, and user. Set to false to reduce CSS weight.
 */
/**
 * @global {boolean} [$include-form-sliders=true] Decides if default HTML styles are included (for components with styleHtmlContent: true). Class is applied to .x-html.
 */
/**
 * @global {boolean} [$include-floating-panels=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-default-uis=true] Decides whether or not to include floating panels (useful to disable for iPhone applications which do not typically have floating menus).
 */
/**
 * @global {boolean} [$include-highlights=true] Optionally disable all gradients, text-shadows, and box-shadows. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$include-border-radius=true] Optionally disable all border-radius. Useful for CSS debugging, non-performant browsers, or minimalist designs.
 */
/**
 * @global {boolean} [$basic-slider=false] Optionally remove CSS3 effects from the slider component for improved performance.
 */
/**
 * @global {color} [$base-color=#354F6E] The primary color variable from which most elements derive their color scheme.
 */
/**
 * @global {string} [$base-gradient='matte'] The primary gradient variable from which most elements derive their color scheme.
 * @see background-gradient
 */
/**
 * @global {color} [$alert-color=red] Color used for elements like badges, errors, and "decline" UIs (eg. on buttons).
 */
/**
 * @global {color} [$confirm-color=#92cf00] Color used for elements like success messages, and "confirm" UIs (eg. on buttons).
 */
/**
 * @global {color} [$active-color=darken(saturate($base-color, 55%), 10%)] Color used for elements like selected rows, "action" UIs (eg. on buttons) and certain overlays like the picker mask.
 */
/**
 * @global {color} [$page-bg-color=#eee] Background color for fullscreen components.
 */
/**
 * @global {measurement} [$global-row-height=2.6em] The minimum row height for items like toolbars and list items.
 */
/**
 * Add a background gradient to a selector.
 *
 * @param {color} $bg-color The base color of the gradient.
 * @param {string} [$type=$base-gradient] The style of the gradient, one of five pre-defined options: matte, bevel, glossy, recessed, or flat.
 *
 * @example
 * .my-element {
 *   @include background-gradient(green, 'recessed')
 * }
 */
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.png).
 *
 * @example
 * @include pictos-iconmask('attachment');
 */
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} [$type=$button-gradient] $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
/**
 * Adds a small text shadow (or highlight) to give the impression of beveled text.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds a small box shadow (or highlight) to give the impression of being beveled.
 *
 * @param {string} $type Either shadow or highlight, decides whether to apply a light shadow or dark.
 */
/**
 * Adds basic styles to :before or :after pseudo-elements.
 *
 * @param {measurement} [$width=30px] Height of pseudo-element.
 * @param {measurement} [$height=30px] Height of pseudo-element.
 * @param {measurement} [$top=0] Top positioning of pseudo-element.
 * @param {measurement} [$left=0] Left positioning of pseudo-element.
 *
 * @example
 * .my-element:after {
 *   @include insertion(50px, 50px);
 * }
 */
/**
 * Makes an element stretch to its parent's bounds.
 *
 */
/**
 * Colors the text of an element based on lightness of its background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$contrast=100%] Contrast of text color to its background.
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff); // Colors text black.
 * }
 *
 * @example
 * .my-element {
 *   @include color-by-background(#fff, 40%); // Colors text gray.
 * }
 *
 */
/**
 * Bevels the text based on its background.
 *
 * @param {color} $bg-color Background color of element.
 * @see bevel-text
 *
 */
/**
 * Creates a background gradient for masked elements, based on the lightness of their background.
 *
 * @param {color} $bg-color Background color of element.
 * @param {percent} [$percent=100%] Contrast of the new gradient to its background.
 * @param {percent} [$style=$base-gradient] Gradient style of the gradient.
 * @see background-gradient
 *
 */
/**
 * @global {color} [$toolbar-input-bg=#fff]
 * Background-color for toolbar form fields.
 *
 * @class Ext.form.Field
 * @xtype field
 */
/**
 * @global {color} [$toolbar-input-color=#000]
 * Text color for toolbar form fields.
 *
 * @class Ext.form.Field
 * @xtype field
 */
/**
 * @global {measurement} [$toolbar-input-height=1.5em]
 * Text color for toolbar form fields.
 *
 * @class Ext.form.Field
 * @xtype field
 */
/**
 * @global {color} [$toolbar-input-border-color=rgba(#000, .5)]
 * Border color for toolbar form fields.
 *
 * @class Ext.form.Field
 * @xtype field
 */
/**
 * Includes default toolbar form field styles.
 *
 * @class Ext.TabBar
 * @xtype tabbar
 */
/**
 * @global {color} [$loading-spinner-color=#aaa]
 * Background-color for the bars in the loading spinner.
 *
 * @class Ext.LoadMask
 */
/**
 * Includes default loading spinner styles (for dataviews).
 *
 * @class Ext.LoadMask
 */
/* line 12, ../scss/Ext.ux.Calendar.scss */
.ux-calendar {
  color: #3F4E5E;
  background-color: #EEE;
  width: 100%;
}
/* line 21, ../scss/Ext.ux.Calendar.scss */
.ux-calendar table {
  width: 100%;
  position: relative;
  border-collapse: separate;
  table-layout: fixed;
  font-size: 20px;
}
/* line 31, ../scss/Ext.ux.Calendar.scss */
.ux-calendar table.week td {
  vertical-align: top;
}
/* line 41, ../scss/Ext.ux.Calendar.scss */
.ux-calendar tbody td {
  border-bottom: 1px solid #a3a7af;
  border-left: 1px solid #a3a7af;
  border-right: 1px solid #dadbde;
  border-top: 1px solid #dadbde;
}
/* line 53, ../scss/Ext.ux.Calendar.scss */
.ux-calendar td {
  font-weight: bold;
  position: relative;
  text-align: center;
  vertical-align: middle;
  font-size: 1.3em;
  background-color: #cfced3;
  background-image: -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #b5b3bb), color-stop(10%, #c2c1c7), color-stop(65%, #cfced3), color-stop(100%, #d0cfd4));
  background-image: -webkit-linear-gradient(#b5b3bb, #c2c1c7 10%, #cfced3 65%, #d0cfd4);
  background-image: linear-gradient(#b5b3bb, #c2c1c7 10%, #cfced3 65%, #d0cfd4);
}
/* line 68, ../scss/Ext.ux.Calendar.scss */
.ux-calendar td.today {
  color: white;
  text-shadow: #333 1px 1px 2px;
  -webkit-box-shadow: inset 0px 0px 8px #000;
  border: 1px solid black;
  background: #7188a8;
  background-color: #44566f;
  background-image: -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #313d4f), color-stop(10%, #3a4a5f), color-stop(65%, #44566f), color-stop(100%, #455771));
  background-image: -webkit-linear-gradient(#313d4f, #3a4a5f 10%, #44566f 65%, #455771);
  background-image: linear-gradient(#313d4f, #3a4a5f 10%, #44566f 65%, #455771);
}
/* line 79, ../scss/Ext.ux.Calendar.scss */
.ux-calendar td.unselectable {
  color: #89909A;
  background-color: #cda3a8;
  background-image: -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #bb8289), color-stop(10%, #c49399), color-stop(65%, #cda3a8), color-stop(100%, #cea5aa));
  background-image: -webkit-linear-gradient(#bb8289, #c49399 10%, #cda3a8 65%, #cea5aa);
  background-image: linear-gradient(#bb8289, #c49399 10%, #cda3a8 65%, #cea5aa);
}
/* line 85, ../scss/Ext.ux.Calendar.scss */
.ux-calendar td.selected {
  color: white;
  text-shadow: #333 1px 1px 0px;
  border: 1px solid black;
  background: #1980e5;
  background-color: #4699eb;
  background-image: -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #8bbff2), color-stop(50%, #5da6ed), color-stop(51%, #4699eb), color-stop(100%, #2f8de8));
  background-image: -webkit-linear-gradient(#8bbff2, #5da6ed 50%, #4699eb 51%, #2f8de8);
  background-image: linear-gradient(#8bbff2, #5da6ed 50%, #4699eb 51%, #2f8de8);
}
/* line 95, ../scss/Ext.ux.Calendar.scss */
.ux-calendar td.today.selected {
  color: white;
  text-shadow: #333 1px 1px 2px;
  border: 1px solid black;
  background: #1980e5;
  background-color: #0f4d89;
  background-image: -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #0a335b), color-stop(10%, #0c4072), color-stop(65%, #0f4d89), color-stop(100%, #0f4e8b));
  background-image: -webkit-linear-gradient(#0a335b, #0c4072 10%, #0f4d89 65%, #0f4e8b);
  background-image: linear-gradient(#0a335b, #0c4072 10%, #0f4d89 65%, #0f4e8b);
}
/* line 105, ../scss/Ext.ux.Calendar.scss */
.ux-calendar td.prev-month, .ux-calendar td.next-month {
  color: #89909A;
}
/* line 111, ../scss/Ext.ux.Calendar.scss */
.ux-calendar thead {
  background-color: #cfced3;
  background-image: -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #ffffff), color-stop(2%, #e1e1e4), color-stop(100%, #bdbbc2));
  background-image: -webkit-linear-gradient(#ffffff, #e1e1e4 2%, #bdbbc2);
  background-image: linear-gradient(#ffffff, #e1e1e4 2%, #bdbbc2);
}
/* line 115, ../scss/Ext.ux.Calendar.scss */
.ux-calendar thead th {
  font-size: 9px;
  vertical-align: bottom;
  padding-bottom: 3px;
  color: #3F4E5E;
  text-align: center;
  height: 46px;
  text-shadow: white 1px 1px 1px;
  font-weight: bold;
  border-bottom: 1px solid #a3a7af;
}
/* line 127, ../scss/Ext.ux.Calendar.scss */
.ux-calendar thead th:first-child {
  background: url(../images/larr.png) center center no-repeat;
  cursor: pointer;
}
/* line 133, ../scss/Ext.ux.Calendar.scss */
.ux-calendar thead th:last-child {
  background: url(../images/rarr.png) center center no-repeat;
  cursor: pointer;
}
/* line 139, ../scss/Ext.ux.Calendar.scss */
.ux-calendar thead th span {
  font-size: 20px;
  font-weight: bold;
  height: 30px;
  left: 14.5%;
  position: absolute;
  text-align: center;
  top: 6px;
  width: 71%;
  z-index: 999;
  text-shadow: white 1px 1px 1px;
}
